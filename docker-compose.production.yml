# Production Docker Compose Configuration
# This file defines the production deployment setup with security and performance optimizations

version: '3.8'

services:
  # PostgreSQL Database with production settings
  postgres:
    image: postgres:15-alpine
    container_name: ai-chatbot-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./server/scripts/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - ai-chatbot-network
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache with production settings
  redis:
    image: redis:7-alpine
    container_name: ai-chatbot-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ai-chatbot-network
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API Server with production optimizations
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: ai-chatbot-server-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      GOOGLE_PROJECT_ID: ${GOOGLE_PROJECT_ID}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      CLIENT_URL: ${CLIENT_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost (behind reverse proxy)
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-chatbot-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React App with production build
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: ai-chatbot-client-prod
    restart: unless-stopped
    environment:
      VITE_API_URL: ${API_URL}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      server:
        condition: service_healthy
    networks:
      - ai-chatbot-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backup service for automated database backups
  backup:
    image: postgres:15-alpine
    container_name: ai-chatbot-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./server/scripts/backup.sh:/backup.sh:ro
    networks:
      - ai-chatbot-network
    depends_on:
      - postgres
    command: /backup.sh
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ai-chatbot/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ai-chatbot/redis

networks:
  ai-chatbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16